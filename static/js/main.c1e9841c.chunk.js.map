{"version":3,"sources":["components/ButtonComponent.tsx","components/Controls.tsx","components/Display.tsx","components/SettingsDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonComponent","props","disabled","onClick","callbackFunction","title","Controls","className","value","maxValue","error","increaseCounter","minValue","resetCounter","Display","useState","errorMessage","setErrorMessage","useEffect","counter","SettingsDisplay","type","min","max","onChange","onChangeCallback","App","setMaxValue","setMinValue","setCounter","setError","maxAsString","localStorage","getItem","newMax","JSON","parse","setItem","stringify","minAsString","newMin","currentAsString","newCurrent","e","Number","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1e9841c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ButtonComponent.css'\r\n\r\n\r\ntype ButtonComponentPropsType = {\r\n    callbackFunction: () => void\r\n    title: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport function ButtonComponent(props: ButtonComponentPropsType) {\r\n    return (\r\n        <button\r\n            disabled={props.disabled}\r\n            onClick={() => {\r\n                props.callbackFunction()\r\n            }}>{props.title}\r\n        </button>\r\n    );\r\n}","import React from 'react';\r\nimport './Controls.css'\r\nimport {ButtonComponent} from \"./ButtonComponent\";\r\n\r\n\r\ntype ControlsPropsType = {\r\n    increaseCounter: () => void\r\n    resetCounter: () => void\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n    error: boolean\r\n}\r\n\r\nexport function Controls(props: ControlsPropsType) {\r\n    return (\r\n        <div className=\"controls\">\r\n            <ButtonComponent disabled={props.value === props.maxValue || props.error} callbackFunction={props.increaseCounter} title={'inc'}/>\r\n            <ButtonComponent disabled={props.value === props.minValue || props.error} callbackFunction={props.resetCounter} title={'reset'}/>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './Display.css'\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    error: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n    //local state for errormessage\r\n    const [errorMessage, setErrorMessage] = useState<string>('')\r\n\r\n    //tracking error to display it when settings are changing\r\n    useEffect(() => {\r\n        if(props.minValue < props.maxValue) {\r\n            setErrorMessage(`enter values and press \"set\"`)\r\n        } else if(props.minValue >= props.maxValue) {\r\n            setErrorMessage('max value can not be less or equal to min value')\r\n        }\r\n    }, [props.error, props.maxValue, props.minValue])\r\n\r\n    return (\r\n        <div className=\"display\">\r\n            <div className={props.counter === props.maxValue ? \"counter-max\" : \"counter\"}>\r\n                {props.error ? <h4 className={props.minValue >= props.maxValue? \"errorMessageRed\" : \"errorMessage\"}>{errorMessage}</h4> : props.counter}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport './SettingsDisplay.css'\r\n\r\ntype SettingsDisplayPropsType = {\r\n    title: string\r\n    value: number\r\n    onChangeCallback: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function SettingsDisplay(props: SettingsDisplayPropsType) {\r\n    return (\r\n        <div className=\"settingsDisplay\">\r\n            <div className=\"title-container\">\r\n                <h2 className=\"title\">{props.title}</h2>\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <input className=\"numInput\" type=\"number\" min=\"0\" max=\"100\" value={props.value} onChange={props.onChangeCallback}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Controls} from \"./components/Controls\";\nimport {Display} from \"./components/Display\";\nimport {SettingsDisplay} from \"./components/SettingsDisplay\";\nimport {ButtonComponent} from \"./components/ButtonComponent\";\n\nfunction App() {\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [minValue, setMinValue] = useState<number>(0)\n    const [counter, setCounter] = useState<number>(minValue)\n    //errors\n    const [error, setError] = useState<boolean>(false)\n\n    //maxvalue useEffect\n    useEffect(() => {\n        let maxAsString = localStorage.getItem(\"maxValue\")\n        if (maxAsString) {\n            let newMax = JSON.parse(maxAsString)\n            setMaxValue(newMax)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue))\n    }, [maxValue])\n\n    //minvalue useEffect\n    useEffect(() => {\n        let minAsString = localStorage.getItem(\"minValue\")\n        if (minAsString) {\n            let newMin = JSON.parse(minAsString)\n            setMinValue(newMin)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"minValue\", JSON.stringify(minValue))\n    }, [minValue])\n\n    //current value useEffect\n    useEffect(() => {\n        let currentAsString = localStorage.getItem(\"currentValue\")\n        if (currentAsString) {\n            let newCurrent = JSON.parse(currentAsString)\n            setCounter(newCurrent)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"currentValue\", JSON.stringify(counter))\n    }, [counter])\n\n    //counters logic\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxValue(Number(e.currentTarget.value))\n        setError(true)\n    }\n\n    const onChangeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\n        setMinValue(Number(e.currentTarget.value))\n        setError(true)\n    }\n\n    const increaseCounter = () => {\n        setCounter(counter + 1)\n    }\n\n    const resetCounter = () => {\n        setCounter(minValue)\n    }\n\n    //set counter to start with new values\n    const setCounterToStart = () => {\n        setCounter(minValue)\n        setError(false)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"settings-wrapper\">\n                <div className=\"settings-displays\">\n                    <SettingsDisplay title={'max value:'} value={maxValue} onChangeCallback={onChangeMaxValue}/>\n                    <SettingsDisplay title={'min value:'} value={minValue} onChangeCallback={onChangeMinValue}/>\n                </div>\n                <div className=\"settings-buttons\">\n                    <ButtonComponent title={'set'} callbackFunction={setCounterToStart}\n                                     disabled={minValue >= maxValue}/>\n                </div>\n            </div>\n            <div className=\"counter-wrapper\">\n                <Display error={error} minValue={minValue} maxValue={maxValue} counter={counter}/>\n                <Controls value={counter}\n                          maxValue={maxValue}\n                          minValue={minValue}\n                          error={error}\n                          increaseCounter={increaseCounter}\n                          resetCounter={resetCounter}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}